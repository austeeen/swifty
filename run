#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# Run a build and optionally run the application
#-------------------------------------------------------------------------------


#--/ debug /--------------------------------------------------------------------

# set -u        # require all vars be declared/defined before referenced.
set -o pipefail # return the first error encountered for piped commands
# set -e        # make sure we break on first error.
# set -x        # display every line of code as it executes.


#--/ globals /------------------------------------------------------------------

declare TRUE=1
declare FALSE=0
declare RC_GOOD=0
declare RC_ERROR=1

declare VERSION="0.0.1"
declare DATE="$(date)"
declare SCRIPT=$(basename "$0")
declare SCRIPTNAME=$(echo "$SCRIPT" | cut -d'.' -f1)
declare SCRIPTDIR=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")

declare -a RAW_ARGS=()
declare -a GAME_ARGS=()
declare ARG_DEST=""
for argv in "$@"; do RAW_ARGS+=("$argv") ; done

declare APPNAME="swifty"
declare BASE_CMD="build/$APPNAME"


#--/ commands /-----------------------------------------------------------------

declare USR_CMD=""
declare RUN_CMD=""
declare CMAKE_CLEAN=""

#--/ options /------------------------------------------------------------------

declare EXIT_ON_ERR=$TRUE
declare DRY_RUN=$FALSE


#--/ output /-------------------------------------------------------------------

declare COLS=$(tput cols)

declare COLOR_BLACK='\E[30m'
declare COLOR_DEFAULT='\E[0m'
declare COLOR_RED='\E[31;1m'
declare COLOR_GREEN='\E[32;1m'
declare COLOR_YELLOW='\E[33;1m'
declare COLOR_BLUE='\E[34;1m'
declare COLOR_MAGENTA='\E[35;1m'
declare COLOR_CYAN='\E[36;1m'
declare COLOR_WHITE='\E[37;1m'

declare TAB=".   "
declare STR="+ "
declare CNT="| "
declare LVL=0
declare IND="$STR"

function up_ind() {
  (( LVL < 0 )) && LVL=0
  IND="$(for ((i=0; i < LVL; i++)); do printf '%s' "$TAB"; done;)$STR"
}

function st_ind() { (( LVL = $1 )); up_ind; }
function bump()   { (( LVL += 1 )); up_ind; }
function drop()   { (( LVL -= 1 )); up_ind; }

function outc() {
  if [[ $# -eq 0 ]]; then
    echo "ERROR -- outc() called with no args"
    RC=$RC_ERROR
  elif [[ $# -eq 1 ]]; then
    echo "$1"
  else
    local col="$1"
    local str="$2"
    echo -e "$IND$col$str$COLOR_DEFAULT"
  fi
}

function outw() {
  # wrap the given function's output with color
  local col=$1
  shift
  output="$("$@" 2>&1)"
  echo -e "$col$output$COLOR_DEFAULT"
}

function center() {
  local line="$1"
  printf "%*s\n" $(((${#line} + COLS) / 2)) "$line"
}

function out_line() {
  local dlm=""
  if (( $# > 0 )); then dlm="$1"; else dlm="-"; fi
  printf "%*s\n" "$COLS" " " | tr " " "$dlm"
}

function hdr()   { out_line "="; center "$1"; out_line; }
function sys()   { outc "$COLOR_WHITE"    "[SYS] $*"; }
function err()   { outc "$COLOR_RED"      "[ERR] $*"; (( EXIT_ON_ERR )) && exit $RC_ERROR || return 1; }
function ok()    { outc "$COLOR_GREEN"    "[OK] $*"; }
function dbg()   { outc "$COLOR_MAGENTA"  "[DBG] $*"; }
function warn()  { outc "$COLOR_YELLOW"   "$*"; }
function good()  { outc "$COLOR_GREEN"    "$*"; }
function fail()  { outc "$COLOR_RED"      "$*"; }
function msg()   { outc "$COLOR_BLUE"     "$*"; }
function note()  { outc "$COLOR_MAGENTA"  "$*"; }
function title() { outc "$COLOR_CYAN"     "$*"; bump; }


#--/ utils /--------------------------------------------------------------------

function arg_eval() {
  flags="${1:1}"
  [[ "${1:0:2}" == '--' ]]      && printf '%s' "${1//_/-}" && return
  [[ "${1:0:1}" != '-'  ]]      && printf '%s' "$1"        && return
  for f in $(seq 1 ${#flags}) ; do printf '%s ' "-${1:$f:1}" ; done
}

function cmd() {
  # run command, but don't redirect stdout -- call err if command failed.
  local cmd_str="$*"

  if (( DRY_RUN == TRUE )); then echo "$cmd_str"; else eval "$cmd_str"; fi
  rc=$?
  if [[ $rc -ne $RC_GOOD ]]; then
    err "$cmd_str"
  fi
  return $rc
}

function show_version() { echo -e "$COLOR_CYAN[$SCRIPTNAME] v$VERSION $COLOR_DEFAULT"; }


#--/ CLI /----------------------------------------------------------------------

function run_app() {
    cmd "$RUN_CMD ${GAME_ARGS[@]}"
}

function build_app() {
    title "Building '$APPNAME'"
    cmd mkdir -p build 
    cmd cd build
    cmd cmake -DAPP_NAME=$APPNAME ..
    cmd cmake --build . $CMAKE_CLEAN
    cmd cd ..
    drop
}

function main() {
    if [[ $USR_CMD == "build" ]] || [[ $USR_CMD == "b" ]]; then
        build_app
    elif [[ $USR_CMD == "clean" ]] || [[ $USR_CMD == "c" ]]; then
        CMAKE_CLEAN="--clean-first"
        build_app
    elif [[ $USR_CMD == "gdb" ]] || [[ $USR_CMD == "g" ]]; then
        RUN_CMD="gdb --args $BASE_CMD"
        run_app
    elif [[ $USR_CMD == "run" ]] || [[ $USR_CMD == "r" ]]; then
        RUN_CMD=$BASE_CMD
        run_app
    elif [[ $USR_CMD == "build-run" ]] || [[ $USR_CMD == "br" ]]; then
        RUN_CMD=$BASE_CMD
        build_app
        run_app
    elif [[ $USR_CMD == "valgrind" ]] || [[ $USR_CMD == "v" ]]; then
        RUN_CMD="valgrind --track-origins=yes --leak-check=yes --log-file='valgrind.log' $BASE_CMD"
        run_app
    elif [[ $USR_CMD == "profile" ]] || [[ $USR_CMD == "p" ]]; then
        RUN_CMD="valgrind --tool=callgrind $BASE_CMD"
        run_app
    elif [[ "$USR_CMD" == '-h' ]] || [[ "$USR_CMD" == '--help' ]]; then help_page && exit 0
    elif [[ "$USR_CMD" == '-v' ]] || [[ "$USR_CMD" == '--version' ]]; then show_version && exit 0
    else
        err "Unrecognized command '$USR_CMD'"
    fi
}

function help_page() {
cat << HELP_PAGE

    [$SCRIPTNAME] build and/or run the game
        version = ${VERSION}

    usage:
        $SCRIPTNAME {command} {options|flags...}

    commands:
        * the 'run' command is used by default if no commands AND no options are given.

        b  | build     : run the build
        c  | clear     : clear build files first, then build
        r  | run       : run the app (must be built in the build/ dir)
        br | build-run : run the build and then run the app
        g  | gdb       : run using GDB
        v  | valgrind  : run using valgrind
        p  | profiling : run with valgrind, but using more profiling-related args

    options:
        --args        : game app args
            * MUST be the very last arg

        -h, --help    : show this help page
        -v, --version : print this tool's version number and quit
        --dry-run     : run but do not execute any real commands

    examples:
        * run the game:
            ./run
        * build the game:
            ./run b

    requirements:
        * SFML installed in a 'cmake-recognizeable' install path. See the SFML main page
            to get started (https://www.sfml-dev.org/).
HELP_PAGE
}

function parse_args() {
    if [[ ${#RAW_ARGS[@]} -lt 1 ]]; then
        USR_CMD="run"
        return
    fi

    USR_CMD="${RAW_ARGS[0]}"
    unset RAW_ARGS[0]

    for base_arg in "${RAW_ARGS[@]}" ; do
        if [[ "$ARG_DEST" != '' ]] ; then
            if [[ "$ARG_DEST" == "GAME_ARGS" ]]; then
                GAME_ARGS+=("$base_arg")
            else 
                eval "$ARG_DEST='$base_arg'"
                ARG_DEST=''
            fi
        else
            for arg in $(arg_eval "$base_arg"); do
            if [[ "$arg" == '--' ]]; then break 2
            elif [[ "$arg" == '--args'    ]]; then ARG_DEST="GAME_ARGS"
            elif [[ "$arg" == '--dry-run' ]]; then DRY_RUN=$TRUE
            elif [[ "$arg" == '--help' ]] || [[ "$arg" == '-?' ]] || [[ "$arg" == '-h' ]]; then help_page && exit 0
            elif [[ "$arg" == '-v'     ]] || [[ "$arg" == '--version' ]]; then show_version && exit 0
            else err "Argument not recognized: [$arg]; try --help"
            fi
            done
        fi
    done
}

parse_args
main
